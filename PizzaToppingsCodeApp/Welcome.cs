// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("toppings")]
        public List<Topping> Toppings { get; set; }
    }

    public enum Topping { AlredoSauce, Anchovies, Artichokes, Bacon, Beef, BlackOlives, CanadianBacon, CarmelizedRedOnion, CheddarCheese, Chicken, DicedTomatoes, DicedWhiteOnions, FetaCheese, FourCheese, FreshBasil, GarlicBasilOil, GiantPepperoni, GreenPeppers, Ham, HotPeppers, ItalianSausage, Jalapenos, Lettuce, MozzarellaCheese, Mushrooms, Onions, ParmesanParsley, Pepperoni, Pineapple, RefriedBeans, RoastedRedPepper, RosaGrandePepperoni, Salami, Sausage, SlicedBreadedChickenBreast, SlicedRomaTomatoes };

    public partial class Welcome
    {
        public static List<Welcome> FromJson(string json) => JsonConvert.DeserializeObject<List<Welcome>>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Welcome> self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ToppingConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ToppingConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Topping) || t == typeof(Topping?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "alredo sauce":
                    return Topping.AlredoSauce;
                case "anchovies":
                    return Topping.Anchovies;
                case "artichokes":
                    return Topping.Artichokes;
                case "bacon":
                    return Topping.Bacon;
                case "beef":
                    return Topping.Beef;
                case "black olives":
                    return Topping.BlackOlives;
                case "canadian bacon":
                    return Topping.CanadianBacon;
                case "carmelized red onion":
                    return Topping.CarmelizedRedOnion;
                case "cheddar cheese":
                    return Topping.CheddarCheese;
                case "chicken":
                    return Topping.Chicken;
                case "diced tomatoes":
                    return Topping.DicedTomatoes;
                case "diced white onions":
                    return Topping.DicedWhiteOnions;
                case "feta cheese":
                    return Topping.FetaCheese;
                case "four cheese":
                    return Topping.FourCheese;
                case "fresh basil":
                    return Topping.FreshBasil;
                case "garlic basil oil":
                    return Topping.GarlicBasilOil;
                case "giant pepperoni":
                    return Topping.GiantPepperoni;
                case "green peppers":
                    return Topping.GreenPeppers;
                case "ham":
                    return Topping.Ham;
                case "hot peppers":
                    return Topping.HotPeppers;
                case "italian sausage":
                    return Topping.ItalianSausage;
                case "jalapenos":
                    return Topping.Jalapenos;
                case "lettuce":
                    return Topping.Lettuce;
                case "mozzarella cheese":
                    return Topping.MozzarellaCheese;
                case "mushrooms":
                    return Topping.Mushrooms;
                case "onions":
                    return Topping.Onions;
                case "parmesan parsley":
                    return Topping.ParmesanParsley;
                case "pepperoni":
                    return Topping.Pepperoni;
                case "pineapple":
                    return Topping.Pineapple;
                case "refried beans":
                    return Topping.RefriedBeans;
                case "roasted red pepper":
                    return Topping.RoastedRedPepper;
                case "rosa grande pepperoni":
                    return Topping.RosaGrandePepperoni;
                case "salami":
                    return Topping.Salami;
                case "sausage":
                    return Topping.Sausage;
                case "sliced breaded chicken breast":
                    return Topping.SlicedBreadedChickenBreast;
                case "sliced roma tomatoes":
                    return Topping.SlicedRomaTomatoes;
            }
            throw new Exception("Cannot unmarshal type Topping");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Topping)untypedValue;
            switch (value)
            {
                case Topping.AlredoSauce:
                    serializer.Serialize(writer, "alredo sauce");
                    return;
                case Topping.Anchovies:
                    serializer.Serialize(writer, "anchovies");
                    return;
                case Topping.Artichokes:
                    serializer.Serialize(writer, "artichokes");
                    return;
                case Topping.Bacon:
                    serializer.Serialize(writer, "bacon");
                    return;
                case Topping.Beef:
                    serializer.Serialize(writer, "beef");
                    return;
                case Topping.BlackOlives:
                    serializer.Serialize(writer, "black olives");
                    return;
                case Topping.CanadianBacon:
                    serializer.Serialize(writer, "canadian bacon");
                    return;
                case Topping.CarmelizedRedOnion:
                    serializer.Serialize(writer, "carmelized red onion");
                    return;
                case Topping.CheddarCheese:
                    serializer.Serialize(writer, "cheddar cheese");
                    return;
                case Topping.Chicken:
                    serializer.Serialize(writer, "chicken");
                    return;
                case Topping.DicedTomatoes:
                    serializer.Serialize(writer, "diced tomatoes");
                    return;
                case Topping.DicedWhiteOnions:
                    serializer.Serialize(writer, "diced white onions");
                    return;
                case Topping.FetaCheese:
                    serializer.Serialize(writer, "feta cheese");
                    return;
                case Topping.FourCheese:
                    serializer.Serialize(writer, "four cheese");
                    return;
                case Topping.FreshBasil:
                    serializer.Serialize(writer, "fresh basil");
                    return;
                case Topping.GarlicBasilOil:
                    serializer.Serialize(writer, "garlic basil oil");
                    return;
                case Topping.GiantPepperoni:
                    serializer.Serialize(writer, "giant pepperoni");
                    return;
                case Topping.GreenPeppers:
                    serializer.Serialize(writer, "green peppers");
                    return;
                case Topping.Ham:
                    serializer.Serialize(writer, "ham");
                    return;
                case Topping.HotPeppers:
                    serializer.Serialize(writer, "hot peppers");
                    return;
                case Topping.ItalianSausage:
                    serializer.Serialize(writer, "italian sausage");
                    return;
                case Topping.Jalapenos:
                    serializer.Serialize(writer, "jalapenos");
                    return;
                case Topping.Lettuce:
                    serializer.Serialize(writer, "lettuce");
                    return;
                case Topping.MozzarellaCheese:
                    serializer.Serialize(writer, "mozzarella cheese");
                    return;
                case Topping.Mushrooms:
                    serializer.Serialize(writer, "mushrooms");
                    return;
                case Topping.Onions:
                    serializer.Serialize(writer, "onions");
                    return;
                case Topping.ParmesanParsley:
                    serializer.Serialize(writer, "parmesan parsley");
                    return;
                case Topping.Pepperoni:
                    serializer.Serialize(writer, "pepperoni");
                    return;
                case Topping.Pineapple:
                    serializer.Serialize(writer, "pineapple");
                    return;
                case Topping.RefriedBeans:
                    serializer.Serialize(writer, "refried beans");
                    return;
                case Topping.RoastedRedPepper:
                    serializer.Serialize(writer, "roasted red pepper");
                    return;
                case Topping.RosaGrandePepperoni:
                    serializer.Serialize(writer, "rosa grande pepperoni");
                    return;
                case Topping.Salami:
                    serializer.Serialize(writer, "salami");
                    return;
                case Topping.Sausage:
                    serializer.Serialize(writer, "sausage");
                    return;
                case Topping.SlicedBreadedChickenBreast:
                    serializer.Serialize(writer, "sliced breaded chicken breast");
                    return;
                case Topping.SlicedRomaTomatoes:
                    serializer.Serialize(writer, "sliced roma tomatoes");
                    return;
            }
            throw new Exception("Cannot marshal type Topping");
        }

        public static readonly ToppingConverter Singleton = new ToppingConverter();
    }
}
